//============================================================================
// Name        : STLExam.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <vector>
#include <map>
#include "Items.h"
#include "pugixml.hpp"
#include<iterator>
#include<algorithm>
using namespace std;
map<int,int> countInts(vector<int>);
vector<int> findByKey(map<string,vector<int> >,string);
vector<Items> readXMLFile(string);
map<string,vector<int> > sortSecond(map<string,vector<int> >);
map<string,vector<int> > greaterK(map<string,vector<int> >,int);
vector<string> max(map<string,vector<int> >);

int main() {

    int numbers[] = {1,2,3,4,5,5,5,5,6,7,3};
    vector<int> someIntVector(numbers,numbers+11);
    map<int,int> countingMap = countInts(someIntVector);
    for(map<int,int>::iterator it =countingMap.begin();it!=countingMap.end();it++ )
    {
    	cout<<"Number  "<<it->first<<"    Is in map :"<<it->second<<" times"<<endl;
    }

    cout<<"--------------------------------\n";
    map<string,vector<int> > testingMap;
    testingMap["somevalue"] = someIntVector;

    vector<int> testingVector = findByKey(testingMap,"somevalue");
    for(size_t i = 0 ;i<testingVector.size();i++)
    {
    	cout<<testingVector[i];
    }

    cout<<"\n--------------------------------\n";


    int shuffleNumbers[] = {5,4,2,8,2,11};
    vector<int> shuffleVector(shuffleNumbers,shuffleNumbers+6);
    map<string,vector<int> > mapWithShuffleNumbers ;
    mapWithShuffleNumbers["smth"] = shuffleVector;
    map<string,vector<int> > sortedMap = sortSecond(mapWithShuffleNumbers);
    for(map<string,vector<int> >::iterator it = sortedMap.begin();it!=sortedMap.end();it++)
    {
    	cout<<it->first<<": ";
    	vector<int> printing = it->second;
    	for(size_t i = 0;i<printing.size();i++)
    	{
    		cout<<printing[i]<< "   ";
    	}


    }
    cout<<"\n--------------------------------\n";

    map<string,vector<int> > mapGreaterK = greaterK(sortedMap,4);
    for(map<string,vector<int> >::iterator it = mapGreaterK.begin();it!=mapGreaterK.end();it++)
    {
    	cout<<it->first<<" ";
    	vector<int> smth = it->second;
    	for(size_t i = 0 ; i <smth.size();i++)
    	{
    		cout<<smth[i]<< "  ";
    	}
    }
	return 0;
}
vector<string > max(map<string,vector<int> > keyValues)
		{
	      vector<string> result;

		}
map<string,vector<int> > greaterK(map<string,vector<int> > greaterK,int K)
		{
	     map<string,vector<int> > result;
	     for(map<string,vector<int> >::iterator it=greaterK.begin();it!=greaterK.end();it++)
	     {
	    	 vector<int> testing = it->second;
	    	 vector<int> greaterThanK;
	    	 for(size_t i=0;i<testing.size();i++)
	    	 {
	    		 if(testing[i]>K)
	    		 {
	    			 greaterThanK.push_back(testing[i]);
	    		 }
	    	 }
	    	 result[it->first] = greaterThanK;
	     }
	     return result;
		}
map<string,vector<int> > sortSecond(map<string,vector<int> > keyValues)
		{
	      map<string,vector<int> > result;
	      map<string,vector<int> >::iterator it;
	      for(it=keyValues.begin();it!=keyValues.end();it++)
	      {
	    	  vector<int> sortedInt = it->second;
	    	  sort(sortedInt.begin(),sortedInt.begin()+sortedInt.size());
	    	  result[it->first] = sortedInt;
	      }
	      return result;
		}
vector<int> findByKey(map<string,vector<int> > keyValues,string key)
		{
	vector<int> result;
	for(map<string,vector<int> >::iterator it = keyValues.begin();it!=keyValues.end();it++)
	{
		if(it->first == key)
		{
			vector<int> ints = it->second;
			for(size_t i = 0 ;i<ints.size();i++)
			{
				result.push_back(ints[i]);
			}
		}
	}
	return result;
		}
vector<Items> readXMLFile(string xmlFile)
		{
	        vector<Items> resultVector;
	        pugi::xml_document doc;
			pugi::xml_parse_result result = doc.load_file(xmlFile.data());


		    pugi::xml_node itemsNode = doc.first_child();

		    Items someItem;
		    for(pugi::xml_node item = itemsNode.child("Item");item;item = item.next_sibling("Item")){
		    	pugi::xml_node atr;
		    	atr=item.next_sibling("name");
		    	someItem.setId(atr.attribute("id").as_int());
		    	someItem.setName(item.child("name").text().as_string());
		    	someItem.setPrice(item.child("price").text().as_double());
		    	someItem.setQuantity(item.child("quantity").text().as_int());

		    	resultVector.push_back(someItem);
		    }
		    return resultVector;
		}
map<int,int> countInts(vector<int> ints)
	{
	  map<int,int> someMap;
	  for(size_t i=0;i<ints.size();i++)
	  {
		  int element = ints[i];
		  if(someMap.find(element)==someMap.end())
		  {
			  someMap[element] = 1;
		  }
		  else
		  {
			  int val=someMap[element];
			  val++;
			  someMap[element] = val;
		  }
	  }
	return someMap;
    }
